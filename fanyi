a survey on software-defined network and openflow from concept to implement
一个关于软件定义网络和OpenFlow从概念到实施的调查

摘要：
在本文中，我们将进行在SDN/OpenFlow实施的重要课题的全面调查，包括基本概念、应用、语言抽象、控制器、虚拟化、服务质量、安全、无线和光网络及其整合。我们将比较不同方案的优缺点，并讨论这一令人兴奋的领域未来的研究趋势。这项调查可以帮助工业界和学术界的研发人员，了解最新进展的SDN/OpenFlow设计。


第一部分   介绍

第一节   动机

传统的网络利用专用设备（硬件组件）上实现的特殊算法来控制和监视网络中的数据流，管理路由路径，并确定网络中不同设备是如何相互连接的。一般这些路由算法和规则是在专用的硬件组件如特定应用集成电路（ASIC）实现。ASIC设计用于执行特定的操作。包转发就是一个简单的例子。在传统网络中，当由路由设备接收分组时，它使用嵌入在其固件中的一组规则来查找该目的设备以及该包的路由路径。


这种方法的一个问题是当前网络设备在高网络流量下的局限性，这对网络性能造成了严重的限制。由于网络流量的日益增加，诸如对可伸缩性、安全性、可靠性和网络速度的需求不断增加，严重阻碍了当前网络设备的性能。当前的网络设备缺乏的灵活性来处理不同的数据包类型不同的内容，因为底层硬件实现路由规则。此外，构成互联网主干网的网络需要在硬件或软件调整方面能够适应变化，而不需要大量劳力。然而，传统的网络操作不能很容易地重新编程或重新作业。


解决这个问题的一个可能的解决方案是将数据处理规则作为软件模块实现，而不是将它们嵌入硬件中。这种方法使得网络管理员能够对网络流量有更多的控制，因此在有效利用网络资源方面大大提高了网络的性能。SDN的目标是为网络中的转发硬件提供开放的、用户控制的管理.



SDN在网络管理、控制和数据处理方面提高了网络性能。SDN是传统网络面临的问题的潜在解决方案，在云计算等应用领域得到越来越多的认可。它可以用于数据中心和工作负载优化系统。通过使用SDN，管理员能够控制数据流，以及从中心位置改变网络中的交换设备（或路由设备）的特性，而控制应用程序作为软件模块实现，而不需要单独处理每个设备。
这使网络管理员能够随意改变网络路由设备中的路由表（路由路径）。它还允许对网络数据进行额外的控制层，因为管理员可以将高/低优先级分配给某些数据包，或允许/阻止某些流经网络的包。


从云计算的角度来看，SDN提供了巨大的好处。首先，它使云提供商更容易部署不同厂商的设备。不同厂商的路由器有各自的优点和缺点。然而，每个路由器都有自己的语言语法，这是一个令人头疼的问题，因为每个供应商都有自己的语言语法，现在SDN允许云提供商快速地重新路由路由或资源分配问题，只要每个厂商的路由器遵循SDN标准。第二，它使云用户能够更有效地使用云资源，或者通过创建虚拟流切片来进行科学实验。不管基础设施是无线的还是有线的，不管云提供商如何在不同的位置部署不同的存储单元，SDN中的虚拟流的概念使得数据流透明地穿越所有的云设备。


传统的网络设备相比，SDN提供了更多的网络流量控制。SDN的主要优点包括：

1）智能和速度：SDNs通过强大的控制面板优化工作量分布的能力。这将导致高速传输并更有效地利用资源。
2）轻松网络管理：管理员对网络有远程控制，可以根据工作负载模式改变网络特性，如服务和连接。这使管理员能够更高效、更快捷地访问配置修改。
3）多租户：SDN的概念可以扩展到网络的多个分区，如数据中心和数据云。SDN可以使用解耦控制/数据平面和资源可视化来很好地支持跨租户数据中心优化。
4）虚拟应用网络：虚拟应用网络使用网络资源的虚拟化来隐藏来自用户应用程序的低层物理细节。因此，用户可以在网络中无缝地利用分布式应用程序中的全局资源，而不必直接管理跨多个数据站点的资源分离和迁移问题。





第二节:     OpenFlow: A Popular Protocol/Standard of SDN
OpenFlow：流行的SDN协议/标准

在实际应用中使用SDN有许多协议标准。最流行的一种叫做OpenFlow协议标准。OpenFlow的一个重要特点是，科学家可以利用现有的硬件来设计新的协议，并对其进行了性能分析。现在它也成为商用路由器和交换机的一部分。他们使用开源代码控制通用SDN控制器和交换机。重新分类的开关，以及（OVS）是最流行的一种，软件驱动的OpenFlow交换机。其核心是用Linux 3.3和固件包括Pica8和Indigo也可。

在SDN中，有一个名为控制器的软件，它负责管理交通控制交换机的集合。控制器与OpenFlow交换机进行通信，通过OpenFlow协议管理开关。一个OpenFlow交换机可以有多个流表，一组表，和OpenFlow的通道（图2–）。每个流表包含流量入口和通信与控制器的佳肴，和组表的可配置流条目。OpenFlow交换机通过OpenFlow端口互相连接。最初的OpenFlow路由设备的数据路径有一个空的路由表的一些领域。此表包含几个包字段，例如不同端口的目的地，以及包含不同操作的代码的动作字段。当接收到数据流表中没有匹配项的新包时，它被转发到要处理的控制器。控制器负责数据包处理决策。新的协议（例如OpenFlow）在行业越来越规范，SDN正在成为更容易实现。控制平面在数据平面上生成路由表，利用表来确定数据包应该发送到何处。许多公司利用OpenFlow协议的公司在他们的数据中心网络工程简化操作。OpenFlow和SDN允许数据中心和研究人员很容易地抽象和管理大型网络。

OpenFlow的体系结构通常包括以下3个重要的组成部分。
1）开关：OpenFlow定义一个开源协议监控/改变在不同的交换机和路由器的流量表。OpenFlow交换机至少有三部分组成：A）流量表，每组各流量入口相关的行动领域，B）通信信道，为控制器和交换机之间的命令和数据的传输提供了链接，C）OpenFlow协议，它使得能够与任何路由器/交换机通信的OpenFlow控制器。
2）控制器：控制器可以代表用户的实验从流表中更新（修改、添加或删除）流条目。静态（动态）控制器可以是在计算机上运行的一个简单的软件单元，用于静态地（动态地）在一组科学实验中建立一组测试计算机之间的数据包路径。
3）流条目：每个流条目至少包含该流项的一个简单操作（网络操作）。大多数的OpenFlow交换机支持以下三种行为：（a）发送这个流的数据包到一个端口，（b）将这个流的数据包发送到控制器，和（c）滴流的包。OpenFlow已经经历了许多标准的迭代，它是目前在1.3的版本；然而只有1版是利用能够实用的软件和硬件设计。OpenFlow的二和后续版本改变比赛的结构特征使每头字段的数目和比特数可以被指定。因此，新协议更容易实现。在一个特殊的控制器中，用于将控制位与数据位分开，这使得网络基础设施更易于共享。一个服务器通常用于OpenFlow架构控制器部分。

第三节. Beyond OpenFlow: Other SDN Standards

除了OpenFlow（最流行的SDN协议/标准），还存在着其他的SDN实现。例如，IEEE p1520标准所定义的可编程的网络接口。它可以被看作是SDN的初始模型，因为它也有网络编程抽象。
ForCES（转发和控制单元分离）是IETF定义的另一个标准。它包括对不同方面的报道一系列RFC如何管理控制和数据转发单元。提出了分离IP控制和数据转发、转发和控制元素的传输映射层、逻辑功能块库等分离的模型，但由于缺乏明确的语言抽象定义和控制器切换器通信规则，所以没有得到广泛的应用。

第四节. 1.5 SDN Applications

在这一节中我们将提供基于SDN和OpenFlow的一些应用实例。
1）互联网研究：更新互联网带来了许多挑战，因为它不断被使用；很难测试新的思想和策略来解决现有网络中发现的问题。SDN技术提供了一种在不改变当前网络的情况下测试未来因特网的思想的方法。由于SDN允许控制和数据流量与OpenFlow交换机分离，很容易分离的硬件软件。这种分离允许尝试新的寻址方案，从而可以测试新的Internet体系结构方案。通常，很难用新类型的网络进行实验。由于新类型的网络经常使用不同的寻址方案并包括其他非标准协议，所以这些更改很难并入现有的网络中。OpenFlow允许路由器，交换机，和来自许多不同的公司利用控制平面和数据平面分离的接入点。这些设备简单地根据控制器定义的规则转发数据包。如果数据包到达，并且设备没有它的规则，则设备将包转发给控制器，该控制器决定如何处理该包，并在必要时向该设备发送一条新规则，以便它能够以相同的方式处理将来的数据包。
2）农村连接：SDN简化了复杂的数据中心和企业网络；可以进一步利用它简化农村Wi-Fi网络。农村环境的主要问题包括人口稀少、利润空间小和资源限制等。SDN是有益的，因为它通过将控制/管理功能放置到中央控制器中来分离网络的结构和网络的配置。这种分离使得农村基础设施结构部署业务（必须在农村做局部）和互联网服务提供商（ISP）的业务（通常是在遥远的城市）是完全分离的，即，这两个企业是由不同的实体，。因此，SDN使农村网络的管理比传统的网络架构更方便，因为本地网络设备需要定制控制（这意味着农村设备的控制必须在农村地区进行）。
3）数据中心升级：数据中心是许多公司的一个组成部分。通常情况下，数据中心网络利用专有的体系组成和拓扑结构，造成的问题时，网络融合在一起；但是通常需要合并两个不同的网络。SDN带来了这个问题的解决方案。在提出了一个基于OpenFlow的网络基础设施服务被用来连接数据中心网络。他们进一步指出，这些互联数据中心网络可以解决移动工作量充分利用网络小延迟问题。如果一个网络在一天的某个时间很忙，那么就可以在不同时区或更节能的网络中更快地完成工作负载。
4）移动设备卸载：隐私性应用企业因为人们经常需要保密的数据的工作是很重要的。一些数据可以发送只有几个人而不需要其他的数据安全性在同一层次。作为一个例子，在利用企业为中心的卸载系统（ECOS）来解决这些问题。SDN被用来控制网络和选择资源。资源的选择必须能够满足安全性要求。控制器将确定如果这种装置可将符合安全要求的同时保持节约能源。如果没有这样的设备存在，数据是不允许被卸载从移动设备。如果没有必要节约能源，那么任何有足够容量的资源都可以利用。OpenFlow交换机的利用使控制器可以调节流量。eCos是能够卸载的同时考虑安全要求，没有过于复杂的方案。
5）无线虚拟机：在企业无线虚拟机运行应用程序变得越来越常见。这些虚拟机使公司更灵活，运营成本更低。为了从虚拟机中提取全部潜力，需要使它们更便于携带。主要的问题是如何主要实现虚拟机的IP地址的过程。目前处理虚拟机的方法效率不高。提出的解决方案包括使用移动IP或动态DNS。这两种解决方案的主要问题是，在删除虚拟机后，必须手动重新配置网络设置。这限制了业务和数据中心不容易将虚拟机移植到新的位置。为了解决虚拟机的移动性问题，开发了一个名为“十字路口”的应用程序。交叉路的设计是为了允许现场和离线虚拟机的移动性。十字路口有三个主要目的。第一个目的是能够处理来自数据中心和外部用户的流量。第二个目的是在假定每个数据中心利用OpenFlow控制器利用OpenFlow。第三个目的是利用IP地址和MAC地址的伪地址，以便在移植时保持地址不变，同时允许真正的IP进行相应的更改。他们的软件的基本实现是创建在不同网络中找到虚拟机的规则。





II。SDN的语言抽象
A. 语言抽象

在SDN中，控制功能由两部分组成，即带有程序的控制器和在路由/交换设备上实现的规则集（图4）。这意味着程序员不必担心开关硬件中的低层细节。SDN程序员可以编写规范，捕获网络的预期转发行为，而不是编写处理网络事件和转发规则等底层细节的程序。这允许控制器和交换机之间的交互。编译器将这些规范转换成控制器和交换机的代码段。例如，一个称为NetCore的SDN编程工具允许描述不能直接在交换机上实现的网络规则和策略。关于磊科的另一个重要事实是，它有一套明确的正式规则，为程序执行状态的推理提供了基础。
这里，我们介绍SDN编程中两个重要的语言抽象。

1）网络查询抽象：SDNS每个开关店柜不同的转发规则。它们是用于使用这些规则处理的数据包和数据段总数的计数。对于流量监控，控制器有能力检查与不同转发规则相关的不同计数器。这使程序员能够监视开关上实现的详细细节。这是一项单调乏味的工作，使程序复杂。因此，增加的抽象级别将有助于程序员。支持应用程序的正确运行需要监控组件，狂热的包含一个嵌入的查询语言，提供了有效的抽象，阅读网络状态。这种语言类似于SQL，包含用于选择、过滤、拆分、合并和聚合数据流的片段。这种语言的另一个特点是它允许查询由转发策略组成。编译器产生需要查询和统计的计数器对开关的控制信息。
2）一致性更新的抽象：自从SDNS是事件驱动的网络环境，在SDNS程序需要更新的数据转发策略时由于网络拓扑结构的变化，在通讯链路故障，等一个理想的解决方案是在一次所有的SDN交换机的自动更新；但在现实这是不容易实现的。一个好的解决方案是允许某种级别的抽象，然后将这些更改从一个节点发送到另一个节点。一个例子是每个包的一致性，确保每个包只使用相同的、最新的策略（而不是旧的和新的策略的组合）。这保留了所有的功能，可以通过个人的分组表示他们把通过该属性包含如基本的连通性和无环的重要结构不变量的路径，和链接的访问控制策略。每个流一致性确保使用相同的流策略处理一组相关的数据包。狂热的探索这种抽象提供了一个理想的平台，因为编译器可以用来实现网络策略更新执行繁琐的记帐。

B. Language Abstraction Tools: Frenetic Project



SDN需要高效的语言抽象工具来实现网络重新编程。作为一个例子，狂热的项目旨在提供简单和更高层次的抽象与三个目的，即，（i）数据流量监测，（ii）管理数据包转发策略，（iii）确保一致性更新时的政策。通过提供这些抽象，网络编程变得简单而高效，而无需担心底层编程细节。它收集关于SDN状态的信息，包括流量统计和拓扑变化。运行时系统负责管理轮询交换机计数器、收集统计数据和对事件作出反应。不同的模块可以负责不同的操作如路由，发现网络的拓扑结构，负载均衡，和访问控制等，采用模块化结构设计，负责编写的运行时系统登记每个模块的任务，对程序员的要求任务的自动编译和优化。更新网络的全局配置，狂热的项目提供了一个更高的抽象层次。这个特点使程序体配置网络没有身体上的每个路由设备安装或改变数据包的转发规则。


C. Language Abstraction Tool: FlowVisor


虚拟化层有助于共享网络基础设施顶部的SDN切片的开发和操作。一个潜在的解决方案是自动切片的概念。它为制造商提供了在运营商干预最小化的同时，为不同应用程序重新设计SDN的能力。同时，程序员有能力构建可编程的网络部件，从而可以根据SDN工作原理开发不同的服务。Flow Visor是SDN虚拟化的基本构建块，用于在使用OpenFlow协议分为所谓的流动空间分区的数据流量表开关。因此，开关可以由多个软件控制器同时操作。然而，一个完整的SDN拓扑的实例是不平凡的，因为它涉及许多操作，如映射虚拟SDN（vsdn）的拓扑结构，隧道和执行流程表隔离安装辅助流条目。这样的操作需要大量的管理资源。
首先，代理创建一个控制信息，以这样的方式添加新进入交换机的流量表，所有的引用（地址）来记忆是通过相应的物理条目替换，以及相应的交通控制措施加入到包。代理负责在一个给定的有限结果，CPX已独立转移虚拟资源在其域的域间资源配置优化的能力保持每个节点的状态。如果网络中有大量的客户机，在路由交换机的内存中需要大量的流表。单斜辉石的任务是确保所有流量表几乎是孤立的，所有的数据包处理发生在一个正确的顺序，所有的行动都在一组连续的虚拟节点被映射到同一个路由设备进行。






III.控制器
控制层可以由中央控制器或多个控制器来管理。它提供了对上层应用层SDN状态的全局视图。在本节中，我们将研究软件定义网络中控制器的体系结构和性能。
A. Types of Controllers


虽然SDN适用于某些部署环境（如家庭、数据中心和企业），但将控制委托给远程系统已经引起了一些关于这种方法的控制平面扩展影响的问题。两个最常引起关注的问题是：（a）控制器对数据路径请求的响应速度有多快；（b）每秒可以处理多少数据路径请求。软件控制器，有四个公开的OpenFlow控制器：NOX, NOX-MT, Beacon, and Maestro。

B：：Methods to Enhance Controller’s Performance
提高控制器性能的方法


我们可以通过多层次的控制器结构设计使OpenFlow的网络可扩展性。通过精心部署的控制器，我们可以避免实际网络中的吞吐量瓶颈。目前OpenFlow路由任务分配流程设置中央控制器。而且低级开关必须与控制器进行频繁通信，以便获得关于如何处理传入数据包的指令。这种策略可以消耗控制器的处理能力和开关控制器的链路拥塞。他们最终导致在OpenFlow的可扩展性方面的严重瓶颈。然而，最近对一些部署环境的测量表明，这些数字远远不够。这将导致相对较差的控制器性能和较高的网络需求，以解决感知架构的低效率。但是对于传统的SDN控制器的性能还没有深入的研究。大多数结果是从没有优化吞吐量性能的系统收集的。强调这一点，研究人员能够提高NOx的性能，对于OpenFlow网络的开源控制器，超过30倍的吞吐量。在大多数SDN设计中，中央控制器可以执行所有的编程任务。这个模型肯定给控制平面带来了可伸缩性问题。一个更好的控制平面应该能够使数据包处理速率与CPU数量一致。最好在控制器中提供包级的网络状态。



C. Advanced Controller Design


本文介绍了一种先进的控制平面高速控制功能。在一个称为控制消息淬火（CMQ）提出了减少流量设置延迟时间和提高吞吐量在SDN交换机/路由器。有大量的流量需要由控制器来处理。无法处理这么多的OpenFlow流策略管理是由于控制数据平面接口设计效率低下。特别是交换机控制器通信频繁，交换机必须频繁地与控制器进行协商，以了解如何处理新的传入数据包。CMQ基本想法是问任何开关只发送一个数据包信息在每个RTT（往返时间），为每个源目的地对，在多个流表思念。因此，每次接收同一个源/目的地的包时，我们不需要麻烦控制器。每个交换机应该保持一个动态更新的表，所有学习的、唯一的源目的地对。对于每个无法找到其源对目的地的数据包，即表丢失，交换机将插入这样一个新的对到表中，并查询控制器。当网络拓扑发生变化时，这种成对表将被定期维护，可以由控制平面检测到。
现有SDN控制器的一个问题是，当有超过1000个条目时，SDN流表通常不能很好地伸缩。这主要是因为表通常包含通配符，从而需要三态内容寻址存储器（TCAM），以及复杂的数据结构，慢。在一个称为调色板的方案中，可以将一个大型SDN表分解成小的，并将其分发给整个SDN，而不会破坏策略语义。它还可以通过在不同流之间共享资源来减少表的大小。基于模型的图论用于将小表分配给适当的交换机。有可能在一个负载均衡策略称为balanceflow在有限存在多个控制器，实现了控制器的负载均衡。通过交叉控制器通信，选择一个控制器作为超级控制器，它可以调节每个控制器接收的流请求，而不会引入太多延迟。注意，每个控制器应定期发布其负载信息，以便超级控制器能够正确地分配负载。



IV. NETWORK VIRTUALIZATION
四、网络虚拟化
A. Virtualization Strategies
A.虚拟化策略


随着技术的发展，现代网络越来越大，能够提供各种新的服务。云计算，和一些框架如GENI, FIRE, G-Lab, F-Lab and AKARI，利用网络的大型实验设施。然而，资源总是有限的，用户的需求也在不断增加。网络硬件资源在用户之间的共享成为必要，因为它可以更有效地利用现有的基础设施，满足用户的需求。SDN中的网络虚拟化是为不同用户提供基础设施共享能力的好方法。这个词经常是OpenFlow网络虚拟化这些年。FlowVisor，控制器软件，是OpenFlow控制器和交换机之间的一个中间件。FlowVisor分解给定的网络虚拟切片，每片和代表一个特定的控制器的控制。OpenFlow和FlowVisor有他们在网络管理方面的局限性，灵活性，隔离和服务质量。OpenFlow提供了常用的指令，但缺乏标准管理工具。FlowVisor只能访问数据平面，控制平面和网络控制器，所以必须通过基础设施的用户管理。另一方面，它可以确保逻辑业务隔离，但具有恒定的级别，这意味着它缺乏灵活性。面对这些挑战，研究人员试图基于开放式或FlowVisor为改善网络虚拟化建立自己的建筑。FlowVisor可以预先安装在商用硬件，可以管理网络提供全面的规则的网络管理员，而不是调整的物理路由器和交换机。FlowVisor创建网络资源和行为片为控制代理每一片不同的控制器，如图5所示。这些片可能是交换机端口、以太网地址、IP地址等，它们是孤立的，不能控制其他流量。它可以动态地管理这些切片和分配给不同的OpenFlow控制器，使不同的虚拟网络共享同一物理网络资源。

B:虚拟化模型


在OpenFlow的语境在翻译模式的观点有不同的虚拟化模型（图6）。翻译的目的在于发现物理SDN设施与虚拟资源之间的1∶1映射关系。翻译单元位于应用层和物理硬件之间。根据他们的位置，我们可以把他们分成五个模型。
1）：FlowVisor是FlowVisor翻译单位委托协议和控制各种物理开关或控制器。它完全控制虚拟化任务。
2）Translation unit：它是OpenFlow的实例，它表现在协议层不同控制器之间的转换。
3）多个OpenFlow实例一开关运行连接到一个控制器。转换是将执行之间的数据转发单元和OpenFlow的实例。
4）多个OpenFlow的实例仍然在单个开关运行，但开关的通路被分成几个并行的，每一个实例。它通过调整连接到不同的并行数据路径的端口进行转换。
5）多个转换单元被使用，至少一个用于开关级的虚拟化，另一个用于互连一些虚拟交换机。

c:Virtualization Architectures
虚拟化架构

有些系统已被提出以解决OpenFlow网络虚拟化的局限性。这些方法可以分为三种类型：
（1）提高OpenFlow控制器。OpenFlow控制器是一个软件，它可以由用户修改以满足他们的特殊要求。
（2）提高FlowVisor。的FlowVisor本身已经有了基本的管理功能，它可以提高克服一些局限性。
（3）增加新的抽象层在OpenFlow交换机。研究人员添加新的层或新组件来管理虚拟网络。下面我们将重点对SDN虚拟器的性能要求。
1）灵活性：网络虚拟化的灵活性意味着网络的可伸缩性和控制级别。它通常与隔离需求冲突。它提出了一个系统调用飞延伸NOx 1版本的OpenFlow控制器，并将MySQL 14.14版本的数据库与虚拟物理映射如图7所示。这是一个可扩展的虚拟网络工作，并提供租户完全控制虚拟网络租户可以编写自己的控制器应用程序和定义任意网络拓扑结构。在基于容器的体系结构中，与物理交换机交互的控制器软件在租户应用程序之间共享，这样当控制器变得越来越复杂时，可以节省资源。

2）隔离：为了确保虚拟网络的所有租户能够无冲突地共享基础设施，必须解决隔离问题。隔离可能在不同的级别或位置，就像地址空间一样。提出在研究网络命名ehu-oef是（图10）。该网络采用l2pnv，这意味着二层基于前缀的网络虚拟化，将各种资源片，让用户拥有多个虚拟网络，基于MAC地址设置。l2pnv已经提出了一些具体的流程规则以及一些定制的控制器模块。它可以改变FlowVisor。ehu-oef可以很好的分离流表中的不同的片段，和流量可以基于MAC地址区分。这个解决方案有好处，因为它可以处理较长的mac报头，例如在虚拟局域网（VLAN）中。它也可以通过简单地改变寻址方案来测试其他非IP协议。在SDN虚拟化系统中，建议在数据/控制平面中公平分配资源，如图11所示。所有的SDN住户加强对中央控制器的资源分配网络资源的获取，转发单元的数据通路和控制通道的开关和控制器之间。

3）有效的管理：网络虚拟化管理涉及到映射、层抽象或系统设计，以确保虚拟网络能够满足不同的需求。它是灵活性、隔离性和便利性的结合。提出了一种允许管理工具独立于底层技术的网络虚拟化架构。本文提出了一个抽象为库的部署，对底层网络特定驱动程序具有统一的接口。原型是建立在一个启用OpenFlow的网络如图13所示。它采用单路由器抽象描述了一个网络，并具有可行性，创建隔离的虚拟网络程序自动和点播的方式。

D：Discussions
	讨论

网络虚拟化不仅使基础设施共享，而且提供了更好的方法来利用基础设施或降低成本。虚拟化可以大大降低大规模无线或有线基础设施的网络升级成本。例如，设计了一个移动网络虚拟化方案。它的成本比传统的网络和SDN网络低。德国网络提供了一个案例研究。使用基于SDN的网络，而不是经典的网络资本支出可减少58.04%。定性成本评价表明，基础设施的持续成本、维修成本、维修成本、服务成本都较低。据悉，基于OpenFlow的微型传感器网络（网络组件，如图15所示）可以无缝连接到物联网、云计算的应用。在传统的传感器网络中，不能到达接入点的一些传感器。然而，通过使用虚拟化，我们形成了一个称为流量传感器的新概念，它可以在所有传感器之间实现平滑的数据传输。流量传感器是一种具有本地流量表和控制器的无线通信的传感器。图16示出了在传统传感器网络上的流量传感器网络的优点的示例。在传统的传感器网络中，传感器1和2不能在没有接入点的情况下彼此通信，所以节点4太远而丢失；在流传感器网络内，节点4可以与节点8对话，从而可以访问节点4。实验结果表明，流量传感器比普通传感器具有更高的可达性39%。


五、服务质量（QoS）


在过去的几十年里，互联网工程任务组（IETF）已经定义了两种类型的服务质量（QoS）的架构，IntServ（综合服务）和DiffServ（区分服务）。集成服务是很难在今天的大型网络中实现由于不同路由器运行开销太多。OpenFlow可以提供细粒度的QoS支持（延时、抖动、吞吐量等）。这是因为OpenFlow可以通过控制器控制数据包级或流级数据传输。这样一个精细粒度意味着OpenFlow允许用户指定如何处理个人的流动，这相当于在IETF定义的IntServ。。事实上，OpenFlow提供了一系列的编程工具创建/回收片（一片是一个虚拟的流量）。用户可以定义如何将网络资源（队列、路由器、交换机等）分配给具有不同优先级的不同切片。很少有针对SDN QoS支持问题的作品。在SDN/OpenFlow的一些QoS模型中，开放的服务质量，是一个最典型的解决方案。它有一个全面的控制器架构，支持可扩展的视频流在SDNs。

A. OpenFlow QoS Model

流媒体应用，如互联网会议，IPTV等，都需要严格的服务质量（延迟/抖动）控制。例如，可伸缩视频编码（SVC）将视频段编码为两部分：基本层和一个或多个增强层。重要的是保证基本层的QoS，因为它有详细的像素信息。然而，由于难以控制TCP连接，目前的Internet结构无法实现对底层的高QoS。此外，互联网倾向于搜索最短路径。一旦最短路径拥塞，大量的数据包就会被丢弃。然而，OpenFlow并没有坚持的最短路径。通过编程控制器，我们可以很容易地调整流量传递规则。在他们提出的基于视频传输方案采用动态QoS模型对SVC的基本层数据最好的QoS保证的OpenFlow。QoS优化模型：OpenFlow QoS模型提出了一个有趣的。其基本原理是：将动态QoS路由定义为约束最短路径（CSP）问题。对于视频应用，它采用延迟变化作为优化函数中的约束条件。它首先将整个SDN表示为一个简单的图。然后定义了一个基于时延变化约束的代价函数。CSP问题的目的是找到最小化成本函数的最佳路径。为了满足丢包限制，还定义了一种结合丢包率和时延变化的加权和的组合约束。该解决方案支持第一和第二级的QoS路由。其结果表明，视频流的质量平均提高14%如果只有基础层路由。通过将增强层中的视频数据与基层一起重新布线，质量进一步提高了6.5%。




B. Controller Architecture for QoS Optimization

所提出的控制器具有路由计算和路由管理功能。图17示出了具有各种子功能的控制器体系结构。控制器具有指定QoS要求的强大功能。它还可以直接控制流量表，以便区分不同优先级的流量。控制器和交换机之间的通信可以通过诸如SSL之类的一些标准来实现。值得注意的是，前层为了实现警务功能确保客户遵守服务等级协议（SLA）的QoS合同规定。上面的体系结构应该存在以下三个额外的特性：（1）资源监控：转发器应该全面监控可用的网络资源，并定期向控制器报告。控制器可以轮询转发器以获得这样的配置文件。（2）资源的信号：每个代理应该使用信令消息与当前资源消耗的控制器使某些行为可以由控制器，如更新路由表，改变等QoS参数，（3）资源预留：定时控制器可以命令转发器为未来QoS预留一定的资源需求。这包括缓冲区大小、内存空间、CPU计算时间以及其他资源需求的保留。


C. QoSFlow Architecture

在当前的版本中，OpenFlow是不能够在一个动态的、按需的方式配置QoS参数（即，它是手动的）。qosflow（图18）允许通过规则或政策的交通类和队列管理。它在不改变SDN体系结构的情况下管理QoS资源（例如带宽、队列大小）。所有的行动是由一个OpenFlow控制器和一个动态的、按需的方式调用（手动）。QoSFlow是标准的OpenFlow控制器提供多媒体传输与QoS续约。的qosflow控制器是基于NOx，这是负责管理/监控措施和控制信令消息。新的控制器，同时NOx的API，QoS代理负责创建一个管理员的管理工具和其他两qosflow组件之间的通信模块：QoSFlow的管理与监控。通过使用JSON接口，代理可以接收策略，管理或监视来自第三部分管理员应用程序的命令。组件，分别的qosflow监控管理监控和管理OpenFlow域的QoS。图19示出其控制器结构。的qosflow数据路径组件负责创建的交换机端口的所有底层的行动。该组件允许OpenFlow得到所有需要的信息运行管理命令通过管理员的工具或通过包头信息创建。QoS动作可以通过包头信息自动应用。为了支持细粒度的QoS，将输入的流量分组为数据流和多媒体流，其中多媒体流被动态地放置在保证QoS的路由上，并且数据流保持在传统的最短路径路由方法上。





D. Other QoS Supporting Strategies in SDN/OpenFlow

policycop是一个与供应商无关的QoS策略管理架构。它用于指定基于QoS的服务级别协议（SLA）的一种特殊的软件界面。policycop采用SDN控制平面监视器的QoS策略的一致性，可以自动调整控制平面规则以及基于动态网络流量统计数据平面流量表。在OpenFlow QoS增强方案允许对现有路由队列行为的产生或改变。这表明，OpenFlow的可开关报告队列状态的控制平面。它有一个模块被称为队列管理器插件，允许在每个OpenFlow交换机的QoS功能的统一配置。


VI. SDN SECURITY
A. Intrusion Detection入侵检测

SDN为潜在的安全攻击创建了一些新的目标，比如SDN控制器和虚拟基础设施。除了传统的网络攻击的地方（如路由器、服务器等），SDN具有一些新的靶点，如：（1）SDN控制器：在这里，传统的攻击上面也存在；（2）虚拟基础设施：它可以在虚拟机管理程序传统的攻击，虚拟交换机和VM（虚拟机）；（3）OpenFlow网络：袭击可能发生在OpenFlow协议OpenFlow功能的设备。


B. Modular Security
B.模块化安全

虽然因为OpenFlow数据层和控制层分离，从而大大简化硬件操作，它也带来了问题：一次单点安全控制器是低电平开关所有的攻击，是不能正确地交付数据包。FRESCO-DB，数据库模块，可以简化该安全密钥的管理。它规定了统一的会话密钥格式和IP信誉模型。通过点击路由器设计的灵感，它的模块化和可组合使用的安全协议。它包括两个重要的部件：（1）应用层：它使用API的应用程序和解释程序的模块化支持；（2）瑞典克朗（安全执法的核心），可以用来执行所有相关政策的行为。不同的安全政策，如滴，重定向，检疫，由安全应用程序可以执行在脚本开发的新鲜的网络威胁的反应，通过简单的设置到一个行动的变量。两件以上的NOx是内置的。网络用户可以利用脚本语言来定义各种新鲜的安全模块。关于Python的实现，是用新鲜的原型实施应用层（总在3000条码），和运行一个在线应用OpenFlow的NOx。


C. SDN Traffic Anomaly Detection

C.SDN流量异常检测

它提出了4种不同的OpenFlow的流量异常检测算法。每一个都在真实的网络中评估，包括家庭网络和商业网络。在下面我们总结这4的流量异常检测算法的思想：1）阈值的随机游走基于信用的速率限制（trw-cb）算法：我们知道，一个TCP连接可以建立在一个更高的成功率，如果服务器没有被攻击。通过使用序贯假设检验（即似然比检验），分析每个连接状态并试图检测蠕虫感染。2）速率限制：病毒感染可以在很短的时间内引起许多连接请求，而良性的业务流永远不会有如此高的请求率。这是速率限制的原则，也就是，我们检查请求率并检测恶意事件。3）最大熵检测器：最大熵计算可用于寻找交通统计特征。通过使用基线分布，最大熵模型可以用来将数据包分成不同的类别，每个类别都可以被检测为良性或异常。4）netad：它就像一个防火墙或过滤器。它简单地扫描包头，并根据包属性阻止任何可疑数据包。


D. Language-Based Security
D.基于语言的安全

分析了如何以安全可靠的方式对SDN进行编程。该解决方案包括开发一种支持网络切片概念的新编程模型。一个程序的流量与另一个程序的隔离是借助于切片实现的。它们还将一种业务与其他业务隔离开来。他们开发了切片的语义，并说明了网络程序员现在可以利用的新形式的模块化推理原理。它提供了切片所需的端到端安全属性的定义，并验证了基于切片的网络编程中理想化核心演算编译器的正确性。他们还描述了实施设有翻译验证框架，自动验证编译程序使用Z3定理证明。今天在网络中实现隔离是一项挑战。大多数系统仍然使用手动设置阻止可疑流量。这样的设置通常是劳动密集型的和供应商特有的。其中，建议使用高级编程语言建立数据传输策略，隔离不同的域。它将容易出错的低级设备配置留给SDN编译器。这种方案克服了NOx的缺点，它不能很容易地隔离不同的子网时，安全漏洞检测。由于使用切片隔离概念，基于语言的安全性减轻了编程人员的复杂安全性。一片被定义为由路由器、交换机、通信端口或链路组成的虚拟连接。这些片段是用属性和动作定义的。如果在同一网络中并排运行，切片可以与另一个片段隔离，不会导致切片泄漏到另一片中。他们定义了几个直观的安全属性，比如隔离，并开发了一个称为隔离的操作条件，这意味着隔离属性。最后，定义了一个编译算法，并证明了它是分离和隔离的。




E. Loop Detection Problem
环路检测问题

路由循环使数据包永远无法到达最终目的地。它提出了一个动态的算法是建立在头部空间分析，并允许在SDNs检测回路。在该模型中，网络模型被证明为有向图。因此，标题空间分析的概念已被翻译成图论的语言。研究了规则图和动态回路检测问题。他们演示了如何将网络建模为有向图。通过分析拓扑图的可达性和连通性，可以找到一个节点到另一个节点，没有循环路径。提出了一种动态强连通分量算法，使我们能够跟踪边缘插入和删除。它还可以用来检测路由路径中的循环。所有上述SDN安全方案的比较是以表格的形式给出的：





F. SDN Safety Issue: Failure Recovery
f.安全性问题：故障恢复

为了建立一个可信的SDN，我们需要使SDN抵抗外部故障（安全问题）和内部故障（安全问题）。在这里，外部失败指的是对手的外部故意攻击。上面讨论的安全解决方案旨在检测和克服外部攻击。内部故障是指由于系统缺陷或人为因素造成的自然故障。我们认为这些内部故障是安全问题。例如，如果控制器和交换机之间的通信链路因带宽不可用而中断，则SDN可能失败。因此，所有控制器的命令不能传递到交换机的流程表中。如果切换到交换机路径有链路故障，许多数据包可能丢失。因此，需要某种类型的链路质量监控和路径恢复方案来克服链路故障。可能有许多其他的安全问题在有限例如，控制器可能无法同步更新所有交换机的流表由于进度管理失败。




VII. OPEN FLOW FOR WIRELESS AND OPTICAL NETWORKS
A. Overview
七。无线光网络，开放流
A.概述

为什么OpenFlow是为了无线网络？无线基础设施比有线基础设施更为复杂和复杂。许多无线标准，如Wi-Fi、Wi Max、蜂窝网络等，都是在同一个骨干网中合作，提供随时随地的因特网接入。管理这样一个异构的无线基础设施是一个很大的挑战。更糟糕的是，不同的无线产品有自己的低层（物理/ MAC层）规范，并且很难重新配置用于动态移动应用程序。OpenFlow可以卸载无线MAC层业务的虚拟机，并使用软件定义的网络编程实现高度的灵活性和可重构性。OpenFlow底层无线传输将从更高的层控制；从而使得无线数据转发达到更高的速率（千兆位/秒）。当采用SDN/OpenFlow控制光网络：（1）目前的光网络已经难以独立做出反应，从客户端系统分布在网络边缘的请求。SDN提供了可编程的抽象接口，用于光学控制单元中灵活的应用程序重新配置。（2）由于嵌入式软件的存在，现有光网络不能很容易地升级光交换机中的软件。OpenFlow可以轻松升级服务由于其控制平面和数据平面分离。（3）允许通过SDN/OpenFlow多级抽象的网络重新编程和虚拟化技术。这使得光网络栈适合于不同的网络拓扑结构。（4）光学硬件的成本通常很高，尤其是光子学和相关的电子元件。SDN/OpenFlow可以减少这些成本由于其“转储”硬件操作只是简单的遵循流程表。



B:
OpenFlow for Wireless Sensor Networks
无线传感器网络技术

无线传感器网络已经成为环境监测的重要平台。然而，这些传感器的产品不能很容易地编程由于供应商特定的SDK（和紧密集成的硬件和软件在一个传感器节点。此外，如果需要一个新的环境监测任务，这些传感器很难重新执行任务。在这么多节点的大规模无线传感器网络中，这是不现实的。虽然一些厂商的传感器板采用了一些空中编程技术，但它们的数据传感和转发方案仍然是厂商特有的。SDN/OpenFlow能够很好地解决上述问题。它使每个传感器仅仅根据指定的流表和规则向前转发传感器数据。所有这些规则都可以通过控制器编程轻松更改。由于所有节点都遵循通用操作系统，通过标准脚本编程可以很容易地实现重任务。一个软件定义的无线传感器网络体系结构，称为传感器技术，可以用来解决上述关键技术的挑战。我们举例说明了图20中的主要思想。它分为三层：应用层具有所有传感器数据查询相关应用，如本地数据处理；控制平面和数据平面完全分离；前者可以远程重新配置传感器参数，后者可以检查流程表并执行相应的操作。其主要思想是通过可编程控制平面和用户自定义流程表，使大规模传感器网络易于管理。传感器不再依赖于应用程序，传感器数据查询策略可以很容易地重新设置。OpenFlow允许传感器一个简单的风格的政策变化，因为程序员可以不处理无线传感器控制器的软件变化。


C. OpenFlow for Wireless Mesh Networks

OpenFlow可以无线Mesh网络（WMN）是非常有用的管理。如今，WMN经常用于社区网络或军事应用中，以便不时地重新执行任务。例如，互联网提供商可以重新规划社区网状网络，以建立不同的IPTV服务。军事中心可能希望重新配置无线网络以适应不同的监视场景。现有的网状网络节点完全具备所有物理层到应用层的功能。网络管理器需要单独设置每个网格节点，因为每个节点可能有特定于供应商的编程特性或专有的设备管理配置文件。总的来说，今天很难进行快速重新分配或政策变化在异构网格客户端（如笔记本电脑、PDA、手机等）在网状网络。OpenFlow网络的解耦控制和硬件通信的完全，只留下基本数据在每个节点转发的功能，而整个网络可以很容易地重新编程，通过一个标准的网络操作系统（如NOx）在控制面板中运行。



D. OpenFlow for Optical Networks

由于光纤中的高速光传输，光网络已成为最快的因特网数据传输方式。一个典型的光网络的节点组成，如波长交叉连接（WXC），重新配置的光分插复用器（ROADM），和光交叉连接（PXC）。目前光节点可以通过网元管理系统（EMS）控制和网络管理系统（NMS），采用手动或半光路配置静态风格。虽然这种方法是可靠的，但是很难设计一种控制平面技术来实现城域/主干光网络中动态波长路径的控制。这样的控制平面应该能够减少运营费用，缩短数据传输延迟，并且应该高度可扩展到网络流量。一个重要的光学控制系统称为通用多协议标签交换（GMPLS）。




































